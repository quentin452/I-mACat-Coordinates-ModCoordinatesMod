buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/maven' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

archivesBaseName = "${fileName}-${mcVersion}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: '1.17.1'
    accessTransformer = file('src/main/resources/META-INF/mycoordinatesmods_at.cfg')
    runs {
        client = {
            properties 'forge.logging.markers': ''
            properties 'forge.logging.console.level': 'debug'
			arg project.mixin.toBoolean() ? "-mixin.config=${modid}.mixins.json" : ""
            workingDirectory project.file('run')
            mods { "${modid}" { source sourceSets.main } }
        }
        server = {
            properties 'forge.logging.markers': ''
            properties 'forge.logging.console.level': 'debug'
			arg project.mixin.toBoolean() ? "-mixin.config=${modid}.mixins.json" : ""
            workingDirectory project.file('run')
            mods { "${modid}" { source sourceSets.main } }
        }
		data = {
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'
            args '--mod', modid, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
			workingDirectory project.file('run')
			mods { "${modid}" { source sourceSets.main } }
		}
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://dvs1.progwml6.com/files/maven"
    }
	maven {
        url "https://www.cursemaven.com"
    }
	maven {
	 	url 'https://maven.theillusivec4.top/'
	}
}

dependencies {
    minecraft "net.minecraftforge:forge:${mcVersion}-${forgeVersion}"
	if(project.mixin.toBoolean()) annotationProcessor "org.spongepowered:mixin:${mixinVersion}:processor"
}

mixin {
    if(project.mixin.toBoolean()) add sourceSets.main, "${modid}.refmap.json"
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta', "${modid}.mixins.json".toString()]
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [modid: modid,
						 version: version,
						 displayName: spacedName,
						 author: author,
						 desc: desc,
						 mcVersion: mcVersion,
						 forgeVersion: forgeVersion,
						 mixins: mixins,
						 clientMixins: clientMixins
						]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
}

jar {
    manifest {
        attributes(["Specification-Title": project.fileName,
                    "Specification-Vendor": project.author,
                    "Specification-Version": "1.0", // We are version 1 of ourselves
                    "Implementation-Title": project.fileName,
                    "Implementation-Version": project.version,
                    "Implementation-Vendor" : project.author,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
					"MixinConfigs": project.mixin.toBoolean() ? "${modid}.mixins.json" : ""
					])
    }
}

jar.finalizedBy('reobfJar')
